{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to kicadpy","text":""},{"location":"gettingStarted/","title":"Getting Started with kicadpy","text":""},{"location":"gettingStarted/#setup","title":"Setup","text":"<p>The following steps will show you how to set up kicadpy.</p> <p>Clone the repository in a directory of your choice</p> <pre><code>cd ~\ngit clone https://github.com/polymurph/kicadpy \n</code></pre> <p>Copy the absolute directory path of the newly cloned kicadpy repo.</p> <p>Find the <code>PyShell_pcbnew_startup.py</code> file inside the Kicad application directory.</p> <p>[!TIP]     For Windows the <code>PyShell_pcbnew_startup.py</code> file is normally located under <code>~\\AppData\\Roaming\\kicad\\8.0</code>.     For Linux it is under<code>~/.config/kicad/8.0/PyShell_pcbnew_startup.py</code>.</p> <p>Open it up and insert the following code snippet.</p> <pre><code>import sys\n# the absolute file path to the kicadpy repo\nkicadpy_dir = '~/AbsPathTo/kicadpy/'\nsys.path.append(kicadpy_dir)\nimport kicadpy as kp\nsys.path.append(kp.getProjectPath())\n</code></pre> <p>Replace <code>~/AbsPathTo/kicadpy/</code> with the prevoius copied absolute path to kicadpy.</p> <p>This code will append the kicadpy to the system paths at startup of the Kicad Console. It creates a link sothat kicadpy is callable.</p> <p>Now lets test the implementation by opening up the kicad project and opening up the layout. Inside the layout editor open the console. In the output test you should see the message <code>Info: Kicadpy is ready to be used</code> pop up.</p>"},{"location":"gettingStarted/#how-to-use","title":"How to use","text":""},{"location":"gettingStarted/#interactive-scripting-inside-the-kicad-console","title":"interactive Scripting inside the kicad console","text":"<p>TODO: explain how its done. Give some examples with pictures etc.</p>"},{"location":"gettingStarted/#creating-a-script-for-the-layout","title":"Creating a script for the layout","text":"<p>Let's say you want to create a script which places 10 vias in a circular pattern around a given center point. The following steps will show you how this can be done. This example uses the following file structure as a demonstration.</p> <pre><code>YourProjectName (root)\n\u251c\u2500\u2500 .git\n\u2514\u2500\u2500 YourKicadProjectFolder\n    \u251c\u2500\u2500 file1.kicad_pcb\n    \u251c\u2500\u2500 file2.sch\n    \u251c\u2500\u2500 file3.pro\n    \u2514\u2500\u2500 file4.lib\n</code></pre> <p>Create a python file inside the folder <code>YourKicadProjectFolder</code> . In this case we name it <code>layoutScript.py</code>. Your folder structure should look as shown below.</p> <pre><code>YourProjectName (root)\n\u251c\u2500\u2500 .git\n\u2514\u2500\u2500 YourKicadProjectFolder\n    \u251c\u2500\u2500 file1.kicad_pcb\n    \u251c\u2500\u2500 file2.sch\n    \u251c\u2500\u2500 file3.pro\n    \u251c\u2500\u2500 file4.lib\n    \u2514\u2500\u2500 layoutScript.py\n    ```\n\nThis file will contain the python script for your layout.\n\nOpen the file ```layoutScript.py``` and add the following code snippet.\n\n```python\nimport kicadpy as kp\n\nkp.via.placeCircularArray(\n    0,      # centerX_mm\n    0,      # centerY_mm\n    10,     # radius_mm\n    0.2,    # drillDiameter_mm\n    0.5,    # width_mm\n    0,      # startAngle_DEG\n    360,    # endAngle_DEG\n    1)      # n_vias\n\nkp.layoutRefresh()\n</code></pre> <p>Save and close the file.</p> <p>Now open up the layout and open up the console. Inside the console execute the script as followed.</p> <pre><code>exec(open(r\"AbsolutePathTo\\YourProjectName\\YourKicadProjectFolder\\layoutScript.py\").read())\n</code></pre> <p>After execution the layout should look like this.</p> <p></p>"}]}